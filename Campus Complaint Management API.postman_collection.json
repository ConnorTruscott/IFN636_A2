{
	"info": {
		"_postman_id": "447a5842-5882-41b2-a39f-a8650eb5fc54",
		"name": "Campus Complaint Management API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "47103938",
		"_collection_link": "https://n12040371-6416414.postman.co/workspace/Campus-Complaint-Management-Sys~b8752b3d-afb2-4840-aa5b-3249890799ce/collection/47103938-447a5842-5882-41b2-a39f-a8650eb5fc54?action=share&source=collection_link&creator=47103938"
	},
	"item": [
		{
			"name": "student",
			"item": [
				{
					"name": "register",
					"item": [
						{
							"name": "register",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let response = pm.response.json();\r",
											"\r",
											"// 1. Status code check\r",
											"pm.test(\"Status code is 201 (Created)\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"// 2. Content-Type check\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"// 3. Response time check\r",
											"pm.test(\"Response time is less than 350ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(350);\r",
											"});\r",
											"\r",
											"// 4. Registration response should contain user info\r",
											"pm.test(\"Registration response contains user info\", function () {\r",
											"    pm.expect(response).to.have.any.keys(\"email\", \"_id\");\r",
											"});\r",
											"\r",
											"// Save JWT if returned\r",
											"if (response.token) {\r",
											"    pm.environment.set(\"jwt_token\", response.token);\r",
											"    console.log(\"JWT Token saved from registration response:\", response.token);\r",
											"} else {\r",
											"    console.warn(\"No token found in registration response!\");\r",
											"}"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{jwt_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"studentNumber\": \"c24845\",\r\n  \"name\": \"cle\",\r\n  \"email\": \"cle@k\",\r\n  \"password\": \"cle\",\r\n  \"phone\": \"0487431650\",\r\n  \"campus\": \"Gardens Point\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:5001/api/auth/register",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5001",
									"path": [
										"api",
										"auth",
										"register"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "auth",
					"item": [
						{
							"name": "login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Parse the response body\r",
											"let response = pm.response.json();\r",
											"\r",
											"// Basic test: status code should be 200\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has email field\", function () {\r",
											"    pm.expect(response).to.have.property(\"email\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"// Save JWT token to environment variable (adjust key as needed)\r",
											"if (response.token) {\r",
											"    pm.environment.set(\"jwt_token\", response.token);\r",
											"    console.log(\"JWT Token saved to environment:\", response.token);\r",
											"} else {\r",
											"    console.warn(\"No token found in response!\");\r",
											"}"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"email\": \"Kiwi@kiwi\",\r\n\"password\": \"Kiwikiwi\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:5001/api/auth/login",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5001",
									"path": [
										"api",
										"auth",
										"login"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "complaints",
					"item": [
						{
							"name": "studentComplaints",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let response = pm.response.json();\r",
											"\r",
											"// Save complaint_id for later use\r",
											"if (response._id) {\r",
											"    pm.environment.set(\"complaint_id\", response._id);\r",
											"}\r",
											"\r",
											"// Check status code\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"// Check Content-Type header\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"// Check response time\r",
											"pm.test(\"Response time is less than 300ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
											"});\r",
											"\r",
											"// Verify response contains complaint id and status=received\r",
											"pm.test(\"Response contains _id and status=received\", function () {\r",
											"    pm.expect(response).to.have.property(\"_id\");\r",
											"    pm.expect(response).to.have.property(\"status\", \"received\");\r",
											"});\r",
											"\r",
											"// Verify complaint has received timestamp\r",
											"pm.test(\"Complaint has received timestamp\", function () {\r",
											"    pm.expect(response).to.have.nested.property(\"statusTimestamps.received\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{jwt_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"title\": \"Aircon not working in library\",\r\n  \"category\": \"Facilities & Maintenance\",\r\n  \"description\": \"The AC in the library is not working in room 201.\",\r\n  \"location\": \"Gardens Point\",\r\n  \"date\": \"2025-09-30\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:5001/api/complaints",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5001",
									"path": [
										"api",
										"complaints"
									]
								}
							},
							"response": []
						},
						{
							"name": "studentComplaints",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let response = pm.response.json();\r",
											"\r",
											"// Check status code\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// Check Content-Type header\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"// Check response time\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"// Verify response is an array and contains complaints\r",
											"pm.test(\"Response is an array and contains complaint(s)\", function () {\r",
											"    pm.expect(response).to.be.an(\"array\");\r",
											"    if (response.length > 0) {\r",
											"        pm.expect(response[0]).to.have.property(\"_id\");\r",
											"        pm.expect(response[0]).to.have.property(\"status\");\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{jwt_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://localhost:5001/api/complaints",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5001",
									"path": [
										"api",
										"complaints"
									]
								}
							},
							"response": []
						},
						{
							"name": "stuedentComplaints",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let response = pm.response.json();\r",
											"\r",
											"// Check status code\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// Check Content-Type header\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"// Check response time\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"// Verify complaint description is updated\r",
											"pm.test(\"Complaint description is updated\", function () {\r",
											"    pm.expect(response).to.have.property(\"description\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{jwt_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"description\": \"AC still broken, worse than before\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:5001/api/complaints/{{complaint_id}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5001",
									"path": [
										"api",
										"complaints",
										"{{complaint_id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "feedback",
					"item": [
						{
							"name": "studentAddFeedback",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let response = pm.response.json();\r",
											"\r",
											"// Check status code\r",
											"pm.test(\"Status code is 200/201\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
											"});\r",
											"\r",
											"// Check Content-Type\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"// Check response time\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"// Check feedback object exists and has rating + text\r",
											"pm.test(\"Feedback contains rating and text\", function () {\r",
											"    pm.expect(response).to.have.property(\"feedback\");\r",
											"    pm.expect(response.feedback).to.have.property(\"rating\");\r",
											"    pm.expect(response.feedback).to.have.property(\"text\");\r",
											"});\r",
											"\r",
											"// Save complaint id for later use\r",
											"if (response._id) {\r",
											"    pm.environment.set(\"complaint_id\", response._id);\r",
											"    console.log(\"Saved complaint_id:\", response._id);\r",
											"}"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{jwt_token}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"text\": \"AC fixed, works fine now\",\r\n  \"rating\": 4\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:5001/api/complaints/{{complaint_id}}/feedback",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5001",
									"path": [
										"api",
										"complaints",
										"{{complaint_id}}",
										"feedback"
									]
								}
							},
							"response": []
						},
						{
							"name": "studentUpdateFeedback",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let response = pm.response.json();\r",
											"\r",
											"// Check status code\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// Check Content-Type\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"// Check response time\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"// Check feedback updated correctly\r",
											"pm.test(\"Feedback contains updated rating and text\", function () {\r",
											"    pm.expect(response).to.have.property(\"feedback\");\r",
											"    pm.expect(response.feedback).to.have.property(\"rating\");\r",
											"    pm.expect(response.feedback).to.have.property(\"text\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{jwt_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"text\": \"Service was quick and professional!!\",\r\n  \"rating\": 3\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:5001/api/feedback/{{complaint_id}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5001",
									"path": [
										"api",
										"feedback",
										"{{complaint_id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "navbar",
					"item": [
						{
							"name": "navbar",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Parse the response body",
											"let response = pm.response.json();",
											"",
											"// Basic test: status code should be 200",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"pm.test(\"Navbar contains menu items\", function () {",
											"    pm.expect(response.menu).to.be.an(\"array\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{jwt_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:5001/api/navbar?role=student",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5001",
									"path": [
										"api",
										"navbar"
									],
									"query": [
										{
											"key": "role",
											"value": "student"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "profile",
					"item": [
						{
							"name": "profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Parse response body\r",
											"let response = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Profile contains user details\", function () {\r",
											"    pm.expect(response).to.have.property(\"studentNumber\");\r",
											"    pm.expect(response).to.have.property(\"email\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{jwt_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://localhost:5001/api/auth/profile",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5001",
									"path": [
										"api",
										"auth",
										"profile"
									]
								}
							},
							"response": []
						},
						{
							"name": "profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Parse the response body\r",
											"let response = pm.response.json();\r",
											"\r",
											"// Basic test: status code should be 200\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Profile has role field\", function () {\r",
											"    pm.expect(response).to.have.property(\"role\", \"student\");\r",
											"});\r",
											"\r",
											"pm.test(\"Profile update successful\", function () {\r",
											"    pm.expect(response).to.have.property(\"ok\", true);\r",
											"    pm.expect(response).to.have.property(\"role\", \"student\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 350ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(350);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{jwt_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Summer\",\r\n  \"campus\": \"Gardens Point\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:5001/api/profile/me",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5001",
									"path": [
										"api",
										"profile",
										"me"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "notifications",
					"item": [
						{
							"name": "notifications",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Parse the response body",
											"let response = pm.response.json();",
											"",
											"// Basic test: status code should be 200",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"pm.test(\"Notifications include list\", function () {",
											"    pm.expect(response).to.be.an(\"array\");",
											"    if (response.length > 0) {",
											"        pm.expect(response[0]).to.have.property(\"_id\");",
											"    }",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{jwt_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://localhost:5001/api/notifications",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5001",
									"path": [
										"api",
										"notifications"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "staff",
			"item": [
				{
					"name": "auth",
					"item": [
						{
							"name": "staff login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Parse the response body\r",
											"let response = pm.response.json();\r",
											"\r",
											"// Basic test: status code should be 200\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has email field\", function () {\r",
											"    pm.expect(response).to.have.property(\"email\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"// Save staff JWT token\r",
											"if (response.token) {\r",
											"    pm.environment.set(\"jwt_token\", response.token);\r",
											"    console.log(\"Staff token saved:\", response.token);\r",
											"} else {\r",
											"    console.warn(\"No token found in response!\");\r",
											"}"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"email\": \"apple@a\",\r\n\"password\": \"apple\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:5001/api/auth/login",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5001",
									"path": [
										"api",
										"auth",
										"login"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "complaints",
					"item": [
						{
							"name": "staffComplaints",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let response = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Complaints have category field\", function () {\r",
											"    if(response.length > 0){\r",
											"        pm.expect(response[0]).to.have.property(\"category\");\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{jwt_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://localhost:5001/api/staff/complaints",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5001",
									"path": [
										"api",
										"staff",
										"complaints"
									]
								}
							},
							"response": []
						},
						{
							"name": "staffComplaints",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let response = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Complaint status updated\", function () {\r",
											"    pm.expect(response).to.have.property(\"status\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{jwt_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"status\": \"closed\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:5001/api/staff/complaints/{{complaint_id}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5001",
									"path": [
										"api",
										"staff",
										"complaints",
										"{{complaint_id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "feedback",
					"item": [
						{
							"name": "staffFeedback",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let response = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Feedback includes text or rating\", function () {\r",
											"    if(response.length > 0){\r",
											"        pm.expect(response[0]).to.have.any.keys(\"text\", \"rating\");\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{jwt_token}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://localhost:5001/api/feedback",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5001",
									"path": [
										"api",
										"feedback"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "navbar",
					"item": [
						{
							"name": "navbar",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Parse the response body",
											"let response = pm.response.json();",
											"",
											"// Basic test: status code should be 200",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"pm.test(\"Navbar contains menu items\", function () {",
											"    pm.expect(response.menu).to.be.an(\"array\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{jwt_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:5001/api/navbar?role=student",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5001",
									"path": [
										"api",
										"navbar"
									],
									"query": [
										{
											"key": "role",
											"value": "student"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "profile",
					"item": [
						{
							"name": "profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"pm.test(\"Profile contains user details\", function () {",
											"    pm.expect(jsonData.values).to.have.property(\"name\");",
											"    pm.expect(jsonData.values).to.have.property(\"email\");",
											"    pm.expect(jsonData.values).to.have.property(\"category\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{jwt_token}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:5001/api/profile/me",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5001",
									"path": [
										"api",
										"profile",
										"me"
									]
								}
							},
							"response": []
						},
						{
							"name": "profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let body = pm.response.text();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"pm.test(\"Body contains ok and role\", function () {",
											"    pm.expect(body).to.include('\"ok\":true');",
											"    pm.expect(body.toLowerCase()).to.include('\"role\":\"staff\"');",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{jwt_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"summer\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:5001/api/profile/me",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5001",
									"path": [
										"api",
										"profile",
										"me"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "notifications",
					"item": [
						{
							"name": "notifications",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let body = pm.response.text();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"pm.test(\"Body contains notifications\", function () {",
											"    pm.expect(body).to.include('_id');",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{jwt_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://localhost:5001/api/notifications",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5001",
									"path": [
										"api",
										"notifications"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "admin",
			"item": [
				{
					"name": "student login to create complaint",
					"item": [
						{
							"name": "login Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Parse the response body\r",
											"let response = pm.response.json();\r",
											"\r",
											"// Basic test: status code should be 200\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has email field\", function () {\r",
											"    pm.expect(response).to.have.property(\"email\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"// Save JWT token to environment variable (adjust key as needed)\r",
											"if (response.token) {\r",
											"    pm.environment.set(\"jwt_token\", response.token);\r",
											"    console.log(\"JWT Token saved to environment:\", response.token);\r",
											"} else {\r",
											"    console.warn(\"No token found in response!\");\r",
											"}"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"email\": \"Kiwi@kiwi\",\r\n\"password\": \"Kiwikiwi\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:5001/api/auth/login",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5001",
									"path": [
										"api",
										"auth",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "studentComplaints Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let response = pm.response.json();\r",
											"\r",
											"// Save complaint_id for later use\r",
											"if (response._id) {\r",
											"    pm.environment.set(\"complaint_id\", response._id);\r",
											"}\r",
											"\r",
											"// Check status code\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"// Check Content-Type header\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"// Check response time\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"// Verify response contains complaint id and status=received\r",
											"pm.test(\"Response contains _id and status=received\", function () {\r",
											"    pm.expect(response).to.have.property(\"_id\");\r",
											"    pm.expect(response).to.have.property(\"status\", \"received\");\r",
											"});\r",
											"\r",
											"// Verify complaint has received timestamp\r",
											"pm.test(\"Complaint has received timestamp\", function () {\r",
											"    pm.expect(response).to.have.nested.property(\"statusTimestamps.received\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{jwt_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"title\": \"Aircon not working in library\",\r\n  \"category\": \"Facilities & Maintenance\",\r\n  \"description\": \"The AC in the library is not working in room 201.\",\r\n  \"location\": \"Gardens Point\",\r\n  \"date\": \"2025-09-30\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:5001/api/complaints",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5001",
									"path": [
										"api",
										"complaints"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "auth",
					"item": [
						{
							"name": "admin login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let response = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has email field\", function () {\r",
											"    pm.expect(response).to.have.property(\"email\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"// Save admin JWT token\r",
											"if (response.token) {\r",
											"    pm.environment.set(\"jwt_token\", response.token);\r",
											"    console.log(\"Admin token saved:\", response.token);\r",
											"} else {\r",
											"    console.warn(\"No token found in response!\");\r",
											"}"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{jwt_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"email\": \"admin@admin\",\r\n\"password\": \"Admin\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:5001/api/auth/login",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5001",
									"path": [
										"api",
										"auth",
										"login"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "profile",
					"item": [
						{
							"name": "profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Parse the response body",
											"let response = pm.response.json();",
											"",
											"// Basic test: status code should be 200",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Profile has role field\", function () {",
											"    pm.expect(response).to.have.property(\"role\");",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"// Save JWT token to environment variable (adjust key as needed)",
											"if (response.token) {",
											"    pm.environment.set(\"jwt_token\", response.token);",
											"    console.log(\"JWT Token saved to environment:\", response.token);",
											"} else {",
											"    console.warn(\"No token found in response!\");",
											"}"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{jwt_token}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:5001/api/profile/me",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5001",
									"path": [
										"api",
										"profile",
										"me"
									]
								}
							},
							"response": []
						},
						{
							"name": "profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Parse the response body",
											"let response = pm.response.json();",
											"",
											"// Basic test: status code should be 200",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Profile has role field\", function () {",
											"    pm.expect(response).to.have.property(\"role\");",
											"});",
											"",
											"pm.test(\"Profile changes object exists\", function () {",
											"    pm.expect(response).to.have.property(\"changes\");",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 350ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(350);",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{jwt_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Admin1\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:5001/api/profile/me",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5001",
									"path": [
										"api",
										"profile",
										"me"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "staffManagement",
					"item": [
						{
							"name": "staff",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let response = pm.response.json();",
											"",
											"// Basic test: status code should be 200",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Response contains staffId\", function () {",
											"    pm.expect(response).to.have.property(\"_id\");",
											"});",
											"",
											"if (response._id) {",
											"    pm.environment.set(\"staffId\", response._id);",
											"    console.log(\"Saved staffId:\", response._id);",
											"} else {",
											"    console.log(\"No staffId found!\");",
											"}",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(500);",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{jwt_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"test7\",\n  \"email\": \"Testing2\",\n  \"password\": \"123456000\",\n  \"role\": \"Staff\",\n  \"department\": \"Academic Issues\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:5001/api/admin/staff",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5001",
									"path": [
										"api",
										"admin",
										"staff"
									]
								}
							},
							"response": []
						},
						{
							"name": "staff",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Parse the response body",
											"let response = pm.response.json();",
											"",
											"// Basic test: status code should be 200",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"let res = pm.response.json();",
											"pm.test(\"Response is array of staff\", function () {",
											"    pm.expect(res).to.be.an(\"array\");",
											"    if (res.length > 0) {",
											"        pm.expect(res[0]).to.have.property(\"_id\");",
											"        pm.expect(res[0]).to.have.property(\"name\");",
											"    }",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"// Save JWT token to environment variable (adjust key as needed)",
											"if (response.token) {",
											"    pm.environment.set(\"jwt_token\", response.token);",
											"    console.log(\"JWT Token saved to environment:\", response.token);",
											"} else {",
											"    console.warn(\"No token found in response!\");",
											"}"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{jwt_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://localhost:5001/api/admin/staff",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5001",
									"path": [
										"api",
										"admin",
										"staff"
									]
								}
							},
							"response": []
						},
						{
							"name": "staff",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let response = pm.response.json();",
											"",
											"// status code should be 200",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Department should be updated",
											"pm.test(\"Department updated\", function () {",
											"    pm.expect(response).to.have.property(\"department\", \"Other\");",
											"});",
											"",
											"// Response still has staff fields",
											"pm.test(\"Response still has staff fields\", function () {",
											"    pm.expect(response).to.have.property(\"_id\");",
											"    pm.expect(response).to.have.property(\"email\");",
											"});",
											"",
											"// Content-Type check",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"// Response time check ",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{jwt_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"department\": \"Other\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:5001/api/admin/staff/{{staffId}}/department",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5001",
									"path": [
										"api",
										"admin",
										"staff",
										"{{staffId}}",
										"department"
									]
								}
							},
							"response": []
						},
						{
							"name": "staff",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let response = pm.response.json();",
											"",
											"// Status code should be 200",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Staff deleted message\", function () {",
											"    pm.expect(response.message.toLowerCase()).to.include(\"deleted\");",
											"});",
											"",
											"// Content-Type check",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"// Response time check ",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{jwt_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:5001/api/admin/staff/{{staffId}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5001",
									"path": [
										"api",
										"admin",
										"staff",
										"{{staffId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "complaints",
					"item": [
						{
							"name": "adminComplaints",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let response = pm.response.json();\r",
											"\r",
											"// Status code\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"if (response.length > 0) {\r",
											"    pm.environment.set(\"complaintId\", response[0]._id);\r",
											"    console.log(\"Saved complaintId:\", response[0]._id);\r",
											"} else {\r",
											"    console.warn(\"No complaints found for admin!\");\r",
											"}\r",
											"\r",
											"// Content-Type\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"// Response time\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"// Complaints array exists\r",
											"pm.test(\"Complaints list is an array\", function () {\r",
											"    pm.expect(response).to.be.an(\"array\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{jwt_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://localhost:5001/api/admin/complaints",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5001",
									"path": [
										"api",
										"admin",
										"complaints"
									]
								}
							},
							"response": []
						},
						{
							"name": "adminComplaints",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let response = pm.response.json();\r",
											"\r",
											"// Status code\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// Content-Type\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"// Response time\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"// Complaint status updated\r",
											"pm.test(\"Complaint status is updated\", function () {\r",
											"    pm.expect(response).to.have.property(\"status\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{jwt_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"status\": \"resolving\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:5001/api/admin/complaints/{{complaintId}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5001",
									"path": [
										"api",
										"admin",
										"complaints",
										"{{complaintId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "adminComplaints",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let response = pm.response.json();\r",
											"\r",
											"// Status code\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// Content-Type\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"// Response time\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"// Delete confirmation message\r",
											"pm.test(\"Complaint deleted with confirmation\", function () {\r",
											"    pm.expect(response).to.have.property(\"message\").that.includes(\"deleted\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{jwt_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"reason\": \"Duplicate complaint\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:5001/api/admin/complaints/{{complaintId}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5001",
									"path": [
										"api",
										"admin",
										"complaints",
										"{{complaintId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "adminComplaints",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let res = pm.response.json();\r",
											"\r",
											"pm.test(\"Status is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// Content-Type\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"// Response time\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has categories\", function () {\r",
											"  pm.expect(res).to.have.property(\"categories\");\r",
											"  pm.expect(res.categories).to.be.an(\"array\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{jwt_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://localhost:5001/api/admin/complaints/meta",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5001",
									"path": [
										"api",
										"admin",
										"complaints",
										"meta"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "feedback",
					"item": [
						{
							"name": "adminFeedback",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let response = pm.response.json();\r",
											"\r",
											"// Check status code\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// Check Content-Type\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"// Check response time\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"// Verify feedback entries exist with text or rating\r",
											"pm.test(\"Feedback includes text or rating\", function () {\r",
											"    if (Array.isArray(response) && response.length > 0) {\r",
											"        pm.expect(response[0]).to.have.property(\"text\");\r",
											"        pm.expect(response[0]).to.have.property(\"rating\");\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{jwt_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://localhost:5001/api/feedback",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5001",
									"path": [
										"api",
										"feedback"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "departments",
					"item": [
						{
							"name": "departments",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Parse the response body",
											"let response = pm.response.json();",
											"let status = pm.response.code;",
											"let responseJson = pm.response.json();",
											"",
											"",
											"// Make sure _id exists",
											"if (response._id) {",
											"    pm.environment.set(\"dept_id\", response._id);",
											"    console.log(\"Saved dept_id:\", response._id);",
											"} else if (response.department && response.department._id) {",
											"    pm.environment.set(\"dept_id\", response.department._id);",
											"    console.log(\"Saved dept_id (nested):\", response.department._id);",
											"} else {",
											"    console.warn(\"No dept_id found in response!\");",
											"}",
											"",
											"// Check if status is 201 (Created) or 500 (Duplicate key error)",
											"pm.test(\"Status code is 201 or 500 for duplicates\", function () {",
											"    pm.expect([201, 500]).to.include(status);",
											"});",
											"",
											"if (status === 201) {",
											"    pm.test(\"Department created successfully\", function () {",
											"        pm.expect(responseJson).to.have.property(\"name\");",
											"    });",
											"}",
											"",
											"if (status === 500) {",
											"    pm.test(\"Duplicate department not allowed\", function () {",
											"        pm.expect(responseJson.message).to.include(\"duplicate key\");",
											"    });",
											"}",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"// Save JWT token to environment variable (adjust key as needed)",
											"if (response.token) {",
											"    pm.environment.set(\"jwt_token\", response.token);",
											"    console.log(\"JWT Token saved to environment:\", response.token);",
											"} else {",
											"    console.warn(\"No token found in response!\");",
											"}"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{jwt_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"IT \",\n  \"description\": \"Information Technology Department\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:5001/api/departments",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5001",
									"path": [
										"api",
										"departments"
									]
								}
							},
							"response": []
						},
						{
							"name": "departments",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Parse the response body",
											"let response = pm.response.json();",
											"",
											"// Basic test: status code should be 200",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Each department has _id and name\", function () {",
											"    response.forEach(d => {",
											"        pm.expect(d).to.have.property(\"_id\");",
											"        pm.expect(d).to.have.property(\"name\");",
											"    });",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"// Save JWT token to environment variable (adjust key as needed)",
											"if (response.token) {",
											"    pm.environment.set(\"jwt_token\", response.token);",
											"    console.log(\"JWT Token saved to environment:\", response.token);",
											"} else {",
											"    console.warn(\"No token found in response!\");",
											"}"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{jwt_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:5001/api/departments",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5001",
									"path": [
										"api",
										"departments"
									]
								}
							},
							"response": []
						},
						{
							"name": "departments",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Parse the response body",
											"let response = pm.response.json();",
											"",
											"// Basic test: status code should be 200",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Department deleted successfully\", function () {",
											"    pm.expect(response).to.have.property(\"message\", \"Department Deleted\");",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"// Save JWT token to environment variable (adjust key as needed)",
											"if (response.token) {",
											"    pm.environment.set(\"jwt_token\", response.token);",
											"    console.log(\"JWT Token saved to environment:\", response.token);",
											"} else {",
											"    console.warn(\"No token found in response!\");",
											"}"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{jwt_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:5001/api/departments/{{dept_id}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5001",
									"path": [
										"api",
										"departments",
										"{{dept_id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "analytics",
					"item": [
						{
							"name": "analytics",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Parse the response body",
											"let response = pm.response.json();",
											"",
											"// Basic test: status code should be 200",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Analytics response has expected fields\", function () {",
											"    pm.expect(response).to.have.property(\"total\");",
											"    pm.expect(response).to.have.property(\"received\");",
											"    pm.expect(response).to.have.property(\"resolving\");",
											"    pm.expect(response).to.have.property(\"closed\");",
											"});",
											"",
											"let res = pm.response.json();",
											"",
											"pm.test(\"Total equals sum of received + resolving + closed\", function () {",
											"    pm.expect(res.total).to.eql(res.received + res.resolving + res.closed);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"",
											"// Save JWT token to environment variable (adjust key as needed)",
											"if (response.token) {",
											"    pm.environment.set(\"jwt_token\", response.token);",
											"    console.log(\"JWT Token saved to environment:\", response.token);",
											"} else {",
											"    console.warn(\"No token found in response!\");",
											"}"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{jwt_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:5001/api/analytics",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5001",
									"path": [
										"api",
										"analytics"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "notifications",
					"item": [
						{
							"name": "notifications",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Parse the response body",
											"let response = pm.response.json();",
											"",
											"// Basic test: status code should be 200",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Each notification has _id, message, and read\", function () {",
											"    response.forEach(n => {",
											"        pm.expect(n).to.have.property(\"_id\");",
											"        pm.expect(n).to.have.property(\"message\");",
											"        pm.expect(n).to.have.property(\"read\");",
											"    });",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"// Save JWT token to environment variable (adjust key as needed)",
											"if (response.token) {",
											"    pm.environment.set(\"jwt_token\", response.token);",
											"    console.log(\"JWT Token saved to environment:\", response.token);",
											"} else {",
											"    console.warn(\"No token found in response!\");",
											"}"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{jwt_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:5001/api/notifications",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5001",
									"path": [
										"api",
										"notifications"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "navbar",
					"item": [
						{
							"name": "navbar",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Parse the response body",
											"let response = pm.response.json();",
											"",
											"// Basic test: status code should be 200",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Navbar contains menu array\", function () {",
											"    pm.expect(response).to.have.property(\"menu\");",
											"    pm.expect(response.menu).to.be.an(\"array\");",
											"});",
											"",
											"pm.test(\"Admin menu contains Dashboard\", function () {",
											"    pm.expect(response.menu).to.include(\"Dashboard\");",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"// Save JWT token to environment variable (adjust key as needed)",
											"if (response.token) {",
											"    pm.environment.set(\"jwt_token\", response.token);",
											"    console.log(\"JWT Token saved to environment:\", response.token);",
											"} else {",
											"    console.warn(\"No token found in response!\");",
											"}"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{jwt_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:5001/api/navbar?role=admin",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5001",
									"path": [
										"api",
										"navbar"
									],
									"query": [
										{
											"key": "role",
											"value": "admin"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	]
}